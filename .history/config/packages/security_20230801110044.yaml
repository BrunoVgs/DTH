security:
    enable_authenticator_manager: true
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto
            cost: 10
    providers:
        users_in_memory: { memory: null }
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: users_in_memory
            stateless: true # Make the firewall stateless for JWT authentication
            anonymous: false  

            # Add the JWT authenticator
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

    lexik_jwt_authentication:
    token_extractors:
            # Remove the existing configuration for "authorization_header"
            # You may have "authorization_header: { name: Bearer, prefix: Bearer }" which reads the token from the header
            # Remove that, since we want to read it from the cookie instead.

            # Add this to read the token from the cookie
        cookie:
            name: jwtToken
            read_only: true        

            logout:
                delete_cookies:
                    jwtToken: null
                path: /logout
                target: /login
                   

        login:
            pattern: ^/login
            stateless: true
            json_login:
                check_path: /login/process
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

  


    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/volunteer, roles: ROLE_VOLUNTEER }
        - { path: ^/donor, roles: ROLE_DONOR }
        - { path: ^/admin, roles: ROLE_ADMIN }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 
                time_cost: 3 
                memory_cost: 10 
